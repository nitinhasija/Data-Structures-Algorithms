/*Given a string A, find if there is any subsequence that repeats itself.

A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

NOTE : sub-sequence length should be greater than or equal to 2.

Input Format:
The first and the only argument of input contains a string A.

Output Format:
Return an integer, 0 or 1:
    => 0 : False
    => 1 : True
*/

// Time Complexity - O(n^2)
// Space Complexity - O(N^2)

import java.util.HashSet;

public class Solution {
    public int anytwo(String A) {
        StringBuilder sb;
        HashSet<String> hs = new HashSet();
        HashSet<Character> hs1 = new HashSet<>();

        for (int i = 0; i < A.length(); i++) {
            sb = new StringBuilder();
            sb.append(A.charAt(i));
            for (int j = i + 1; j < A.length(); j++) {
                sb.append(A.charAt(j));

                if (hs.contains(sb + "") && hs1.contains(A.charAt(i)))
                    return 1;

                hs.add(sb + "");
                sb.deleteCharAt(1);
                if (A.charAt(i) == A.charAt(j))
                    break;
            }
            hs1.add(A.charAt(i));
        }
        return 0;
    }
}